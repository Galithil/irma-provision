---

- include: prereqs.yml 

- name: fetch piper from github 
  git: repo={{ ngi_piper_repo }} 
       dest={{ ngi_piper_src_dest }}
       version={{ ngi_piper_version }}
       force=yes
  tags: ngi_piper

- name: create piper's destination folder 
  file: name={{ ngi_piper_bin_dest }} state=directory mode=g+s
  tags: ngi_piper


# TODO: This is not needed for developers, so we should only run it for production, 
# where we do not have a home directory at the moment on irma3. 
- name: set mvn command line args in piper's setup.sh 
  lineinfile: 
    dest: "{{ ngi_piper_src_dest }}/setup.sh"
    regexp: "mvn package"
    line: "mvn package {{ maven_args }}"
# if the user sets home_path then this check is not necessary 
#  when: ansible_hostname == '127.0.0.1'
  tags: ngi_piper

- name: set sbt command line args in piper's setup.sh
  replace: 
    dest: "{{ ngi_piper_src_dest }}/setup.sh"
    regexp: "^sbt/bin/sbt pack"
    replace: "sbt/bin/sbt pack {{ sbt_args }}"
  tags: ngi_piper

# This could be uploaded as a wrapper script if one would prefer that... 
- name: run piper's setup script 
  shell: source {{ ngi_pipeline_conf }}/{{ bash_env_script }} && sbt/bin/sbt clean {{ sbt_args }} && ./setup.sh {{ ngi_piper_bin_dest }}
  args: 
    chdir: "{{ ngi_piper_src_dest }}"
    creates: "{{ ngi_piper_bin_dest }}/bin/piper"
  tags: ngi_piper

- name: add piper path variable to sourceme script 
  lineinfile: dest={{ ngi_pipeline_conf }}/{{ bash_env_script }}
              line='export PATH={{ ngi_piper_bin_dest }}/bin:{{ ngi_piper_bin_dest }}/workflows:$PATH'
              backup=no
  tags: ngi_piper 

- name: add piper ld_library_path variable to sourceme script                                       
  lineinfile: dest={{ ngi_pipeline_conf }}/{{ bash_env_script }}
              line='export LD_LIBRARY_PATH={{ slurm_drmaa_path }}:$LD_LIBRARY_PATH'
              backup=no
  tags: ngi_piper

- name: add piper sh config variable to sourceme script
  lineinfile: dest={{ ngi_pipeline_conf }}/{{ bash_env_script }}
              line='export PIPER_GLOB_CONF={{ ngi_piper_bin_dest }}/workflows/globalConfig.sh'
              backup=no
  tags: ngi_piper

- name: add piper xml config variable to sourceme script
  lineinfile: dest={{ ngi_pipeline_conf }}/{{ bash_env_script }}
              line='export PIPER_GLOB_CONF_XML={{ ngi_piper_bin_dest }}/workflows/uppmax_global_config.xml'
              backup=no
  tags: ngi_piper

# FIXME: Do we want the piper confs under workflows dir or in the global ngi_pipeline conf folder? 
- name: deploy piper config globalConfig.xml
  template: src="globalConfig.xml.j2" dest="{{ ngi_piper_bin_dest }}/workflows/globalConfig.xml"
  tags: ngi_piper

- name: deploy piper config globalConfig.sh
  template: src="globalConfig.sh.j2" dest="{{ ngi_piper_bin_dest }}/workflows/globalConfig.sh"
  tags: ngi_piper 

- name: deploy piper config uppmax_global_config.xml
  template: src="uppmax_global_config.xml.j2" dest="{{ ngi_piper_bin_dest }}/workflows/uppmax_global_config.xml"
  tags: ngi_piper 

- name: deploy script (gen_GATK_ref.sh) for manual GATK reference generation
  template: src="gen_GATK_ref.sh.j2" dest="{{ ngi_piper_bin_dest }}/gen_GATK_ref.sh"
  tags: ngi_piper

- name: create ngi_resources folder 
  file: name={{ ngi_resources }} state=directory mode=g+s
  tags: ngi_piper

- name: create gatk_bundle directory 
  file: path="{{ gatk_bundle_b37 }}" state=directory mode=g+s
  tags: ngi_piper 

- name: create piper_resources directory 
  file: path="{{ ngi_resources }}/piper" state=directory mode=g+s
  tags: ngi_piper

- name: deploy gatk license key 
  copy:
    src: "files/{{ gatk_key }}"
    dest: "{{ ngi_resources }}/piper/{{ gatk_key }}" 
  tags: ngi_piper

# 3rd party programs that Piper needs should be installed when Piper has been put in 
# place due to dependency on e.g. piper_src.  
- include: dependencies.yml
