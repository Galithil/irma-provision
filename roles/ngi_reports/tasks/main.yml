---
- name: Check if dev_IS virtual env exists 
  shell: conda env list | awk '{print $1}' | egrep -e "^dev_IS$"
  register: ngi_venv_exists
  ignore_errors: true
  tags: ngi_dev

- name: Setup virtual env and install dependencies 
  shell: conda create -n dev_IS pip sqlalchemy 
  when: not ngi_venv_exists.stdout 
  tags: ngi_dev

- include: dependencies.yml
  tags: ngi_reports

- name: Fetch ngi_reports from github 
  git: repo={{ ngi_reports_repo }} 
       dest={{ ngi_reports_dest }}
       version={{ ngi_reports_version }}
       force=yes
       recursive=yes
  tags: ngi_reports

- name: Install ngi_reports requirements
  shell: "{{ ngi_pipeline_venv }}/bin/pip install -r {{ ngi_reports_dest }}/requirements.txt"
  tags: ngi_reports

- name: Install ngi_reports
  shell: "{{ ngi_pipeline_venv }}/bin/pip install ."
  args:
    chdir: "{{ ngi_reports_dest }}"
  tags: ngi_reports

- name: Add ngi_reports to $PATH via sourceme
  lineinfile: dest={{ ngi_pipeline_conf }}/{{ bash_env_script }}
              line='export PATH={{ ngi_reports_dest }}:$PATH'
              backup=no
  tags: ngi_reports

- name: Install pandocfilters submodule
  shell: "{{ ngi_pipeline_venv }}/bin/pip install ."
  args:
    chdir: "{{ ngi_reports_dest }}/data/pandoc_templates/pandocfilters/"
  tags: ngi_reports

- set_fact:
    site: "uppsala"
  tags: ngi_reports

- name: Create Uppsala ngi_reports conf file
  template: src="ngi_reports.conf" dest="{{ ngi_pipeline_conf }}/ngi_reports.conf"
  tags: ngi_reports

- set_fact:
    site: "stockholm"
  tags: ngi_reports

- name: Create Stockholm ngi_reports conf file
  template: src="ngi_reports.conf" dest="{{ ngi_pipeline_conf }}/ngi_reports.conf" 
  tags: ngi_reports
